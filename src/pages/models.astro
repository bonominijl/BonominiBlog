---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';
import '../styles/models.css';

const basePath = import.meta.env.BASE_URL || '/';

const title = "My 3D Model Projects";
const models = await getCollection('models');
---

<Layout>
  <main class="min-h-screen bg-base-50 dark:bg-base-900">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-16">
      <div class="text-center mb-16">
        <h1 class="text-4xl md:text-5xl font-bold text-base-900 dark:text-white mb-4">
          {title}
        </h1>
        <p class="text-xl text-base-600 dark:text-base-300 max-w-2xl mx-auto">
          Personal 3D design projects I've created over the years - interactive models with camera controls
        </p>

      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 gap-10">
        {models.map((m) => (
          <div class="bg-white dark:bg-base-700 shadow-lg p-6">
            <div class="text-center mb-4">
              <h2 class="text-2xl font-semibold text-base-900 dark:text-white">{m.data.title}</h2>
              {m.data.description && (<p class="text-base-600 dark:text-base-300 mt-2">{m.data.description}</p>)}
            </div>
            <model-viewer
              src={m.data.modelUrl}
              camera-controls={m.data.cameraControls}
              auto-rotate={m.data.autoRotate}
              ar={m.data.ar}
              poster={m.data.posterUrl}
              alt={m.data.title}
              shadow-intensity="1"
              exposure="0.8"
              loading="eager"
              reveal="auto"
              environment-image="neutral"
              style="width: 100%; height: 420px; background: #f8fafc dark:bg-base-800; border: none;"
              class="model-viewer-element"
            >  
              <div class="loading-spinner" slot="poster">
                <span class="sr-only">Loading 3D model...</span>
              </div>
              <div slot="progress-bar" class="progress-bar">
                <div class="update-bar"></div>
              </div>
            </model-viewer>
            {m.data.tags?.length ? (
              <div class="mt-4 flex flex-wrap gap-2">
                {m.data.tags.map((t) => (
                  <span class="text-xs px-2 py-1 bg-base-100 dark:bg-base-600 text-base-600 dark:text-base-200">{t}</span>
                ))}
              </div>
            ) : null}
          </div>
        ))}
      </div>
    </div>
  </main>
</Layout>

<!-- Model-viewer script is now loaded in the Layout component -->
<script src={`${basePath}scripts/model-debug.js`}></script>

<script>
  // Wait for the document to be fully loaded
  document.addEventListener('DOMContentLoaded', () => {
    const modelViewers = document.querySelectorAll('model-viewer');
    
    modelViewers.forEach((modelViewer) => {
      // Add progress bar functionality
      modelViewer.addEventListener('progress', (event) => {
        const progressBar = modelViewer.querySelector('.update-bar');
        if (progressBar) {
          const progress = event.detail.totalProgress * 100;
          progressBar.style.width = `${progress}%`;
          
          // For debugging
          console.log(`Model loading progress: ${progress.toFixed(2)}%`);
        }
      });
      
      // Handle model loading errors
      modelViewer.addEventListener('error', (event) => {
        console.error('Error loading model:', event.detail);
        console.error('Model source:', modelViewer.getAttribute('src'));
        
        // Add a visible error message
        const errorDiv = document.createElement('div');
        errorDiv.className = 'model-error';
        errorDiv.innerHTML = `
          <div class="p-4 bg-red-50 dark:bg-red-900 border border-red-200 dark:border-red-800 text-red-700 dark:text-red-300 rounded">
            <p><strong>Error loading 3D model</strong></p>
            <p class="text-sm mt-1">Please check browser console for details</p>
          </div>
        `;
        modelViewer.insertAdjacentElement('afterend', errorDiv);
      });
      
      // Handle successful model load
      modelViewer.addEventListener('load', () => {
        console.log('Model loaded successfully');
      });
    });
  });
</script>
