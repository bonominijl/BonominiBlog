---
import { getCollection } from 'astro:content';
import '../styles/gallery.css';

const entries = await getCollection('gallery');

const withBase = (p) => {
  if (!p) return p;
  if (/^https?:\/\//i.test(p)) return p; // absolute URL
  if (p.startsWith('/')) return p;       // already absolute site path
  const base = (import.meta.env.BASE_URL || '/').replace(/\/+$/, '');
  return `${base}/${p.replace(/^\/+/, '')}`;
};

const images = entries.map((e) => ({
  src: withBase(e.data.imageUrl),
  w: e.data.width ?? 1600,
  h: e.data.height ?? 900,
  thumb: withBase(e.data.thumbUrl ?? e.data.imageUrl),
  alt: e.data.alt || e.data.title,
  title: e.data.title,
  tags: e.data.tags || [],
  description: e.data.description || ''
}));
---

<section class="max-w-7xl mx-auto">
  <!-- Gallery toolbar with tags/filters -->
  <div class="flex flex-wrap items-center justify-between mb-8 gap-4">
    <h2 class="text-2xl font-medium text-base-900 dark:text-white">Featured Images</h2>
    <div class="flex flex-wrap gap-2">
      <button id="all-images" class="gallery-tag bg-accent-500 text-white hover:bg-accent-600 dark:bg-accent-600 dark:hover:bg-accent-700 transition-colors duration-200">
        All
      </button>
      {[...new Set(images.flatMap(img => img.tags))].map((tag) => (
        <button class="image-tag gallery-tag bg-base-100 dark:bg-base-800 text-base-700 dark:text-base-300 hover:bg-accent-50 hover:text-accent-600 dark:hover:bg-base-700 dark:hover:text-accent-400 transition-colors duration-200" data-tag={tag}>
          {tag}
        </button>
      ))}  
    </div>
  </div>

  <!-- Simple gallery grid -->
  <div class="gallery-container grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-x-6 gap-y-8" id="gallery">
    {images.map((img, index) => (
      <div 
        class="gallery-item overflow-hidden shadow-md hover:shadow-lg transition-all duration-300 bg-white dark:bg-base-800"
        data-src={img.src}
        data-width={img.w}
        data-height={img.h}
        data-title={img.title}
        data-description={img.description}
        data-tags={img.tags.join(',')}
      >
        <!-- Image thumbnail -->
        <div class="aspect-[4/3] overflow-hidden relative">
          <img 
            src={img.thumb} 
            alt={img.alt} 
            loading="lazy" 
            class="gallery-thumbnail w-full h-full object-cover transition-all duration-500 cursor-pointer"
          />
        </div>
        
        <!-- Image caption -->
        <div class="p-4 bg-white dark:bg-base-800 border-t border-base-100 dark:border-base-700">
          <p class="font-medium text-base-900 dark:text-white">{img.title}</p>
          {img.tags.length > 0 && (
            <div class="mt-2 flex gap-2 flex-wrap">
              {img.tags.slice(0, 2).map(tag => (
                <span class="text-xs px-2 py-1 bg-base-50 dark:bg-base-700 text-base-500 dark:text-base-400">{tag}</span>
              ))}
              {img.tags.length > 2 && <span class="text-xs px-2 py-1 bg-base-50 dark:bg-base-700 text-base-500 dark:text-base-400">+{img.tags.length - 2}</span>}
            </div>
          )}
        </div>
      </div>
    ))}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Get all gallery items
    const galleryItems = document.querySelectorAll('.gallery-item');
    
    // Create lightbox elements
    const lightbox = document.createElement('div');
    lightbox.className = 'lightbox-overlay';
    lightbox.style.display = 'none';
    
    const lightboxContent = document.createElement('div');
    lightboxContent.className = 'lightbox-content';
    
    const lightboxImg = document.createElement('img');
    lightboxImg.className = 'lightbox-img';
    
    const lightboxCaption = document.createElement('div');
    lightboxCaption.className = 'lightbox-caption';
    
    const prevBtn = document.createElement('button');
    prevBtn.className = 'lightbox-nav lightbox-prev';
    prevBtn.innerHTML = '&#10094;';
    prevBtn.setAttribute('aria-label', 'Previous image');
    
    const nextBtn = document.createElement('button');
    nextBtn.className = 'lightbox-nav lightbox-next';
    nextBtn.innerHTML = '&#10095;';
    nextBtn.setAttribute('aria-label', 'Next image');
    
    const closeBtn = document.createElement('button');
    closeBtn.className = 'lightbox-close';
    closeBtn.innerHTML = '&times;';
    closeBtn.setAttribute('aria-label', 'Close lightbox');
    
    // Assemble the lightbox
    lightboxContent.appendChild(lightboxImg);
    lightboxContent.appendChild(lightboxCaption);
    lightboxContent.appendChild(prevBtn);
    lightboxContent.appendChild(nextBtn);
    lightboxContent.appendChild(closeBtn);
    lightbox.appendChild(lightboxContent);
    document.body.appendChild(lightbox);
    
    // Add styles for lightbox
    const style = document.createElement('style');
    style.textContent = `
      .lightbox-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.9);
        z-index: 9999;
        display: flex;
        align-items: center;
        justify-content: center;
      }
      
      .lightbox-content {
        position: relative;
        max-width: 90%;
        max-height: 90%;
      }
      
      .lightbox-img {
        display: block;
        max-width: 100%;
        max-height: 80vh;
        margin: 0 auto;
      }
      
      .lightbox-caption {
        color: white;
        text-align: center;
        padding: 16px;
        background-color: rgba(0, 0, 0, 0.7);
        margin-top: 10px;
        border-radius: 4px;
      }
      
      .lightbox-caption h3 {
        margin: 0;
        font-size: 18px;
        font-weight: 600;
      }
      
      .lightbox-caption p {
        margin: 8px 0 0;
        font-size: 14px;
        opacity: 0.9;
      }
      
      .lightbox-nav {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background: rgba(0, 0, 0, 0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        font-size: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.3s, transform 0.3s;
      }
      
      .lightbox-prev {
        left: -60px;
      }
      
      .lightbox-next {
        right: -60px;
      }
      
      .lightbox-nav:hover {
        background: rgba(0, 0, 0, 0.8);
        transform: translateY(-50%) scale(1.1);
      }
      
      .lightbox-close {
        position: absolute;
        top: -40px;
        right: 0;
        background: transparent;
        border: none;
        color: white;
        font-size: 32px;
        cursor: pointer;
      }

      @media (max-width: 768px) {
        .lightbox-prev {
          left: 10px;
        }
        
        .lightbox-next {
          right: 10px;
        }
      }
    `;
    document.head.appendChild(style);
    
    // Track current image index
    let currentIndex = 0;
    
    // Function to open lightbox
    function openLightbox(index) {
      currentIndex = index;
      updateLightboxContent();
      lightbox.style.display = 'flex';
      document.body.style.overflow = 'hidden'; // Prevent scrolling
    }
    
    // Function to close lightbox
    function closeLightbox() {
      lightbox.style.display = 'none';
      document.body.style.overflow = '';
    }
    
    // Function to update lightbox content
    function updateLightboxContent() {
      const item = galleryItems[currentIndex];
      
      // Start loading the image
      lightboxImg.src = item.dataset.src;
      
      // Update caption
      const title = item.dataset.title || '';
      const description = item.dataset.description || '';
      
      lightboxCaption.innerHTML = `
        <h3>${title}</h3>
        ${description ? `<p>${description}</p>` : ''}
      `;
    }
    
    // Function to show next image
    function showNext() {
      currentIndex = (currentIndex + 1) % galleryItems.length;
      updateLightboxContent();
    }
    
    // Function to show previous image
    function showPrevious() {
      currentIndex = (currentIndex - 1 + galleryItems.length) % galleryItems.length;
      updateLightboxContent();
    }
    
    // Add click event listeners to gallery items
    galleryItems.forEach((item, index) => {
      item.style.cursor = 'pointer';
      item.addEventListener('click', () => openLightbox(index));
    });
    
    // Add event listeners for navigation
    prevBtn.addEventListener('click', showPrevious);
    nextBtn.addEventListener('click', showNext);
    closeBtn.addEventListener('click', closeLightbox);
    
    // Add keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (lightbox.style.display === 'flex') {
        if (e.key === 'ArrowLeft') {
          showPrevious();
        } else if (e.key === 'ArrowRight') {
          showNext();
        } else if (e.key === 'Escape') {
          closeLightbox();
        }
      }
    });
    
    // Close lightbox when clicking outside the image
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });
    
    // Set up gallery filtering
    const allButton = document.getElementById('all-images');
    const tagButtons = document.querySelectorAll('.image-tag');
    
    // Function to show all images
    function showAllImages() {
      galleryItems.forEach(item => {
        item.style.display = 'block';
      });
    }
    
    // Function to filter images by tag
    function filterByTag(tag) {
      galleryItems.forEach(item => {
        const tags = (item.dataset.tags || '').split(',');
        if (tags.includes(tag)) {
          item.style.display = 'block';
        } else {
          item.style.display = 'none';
        }
      });
    }
    
    // Add click event to "All" button
    if (allButton) {
      allButton.addEventListener('click', () => {
        // Update button styles
        allButton.classList.add('bg-accent-500', 'text-white');
        allButton.classList.remove('bg-base-100', 'text-base-700', 'dark:bg-base-800', 'dark:text-base-300');
        
        tagButtons.forEach(btn => {
          btn.classList.remove('bg-accent-500', 'text-white');
          btn.classList.add('bg-base-100', 'dark:bg-base-800', 'text-base-700', 'dark:text-base-300');
        });
        
        showAllImages();
      });
    }
    
    // Add click events to tag buttons
    tagButtons.forEach(btn => {
      btn.addEventListener('click', () => {
        const tag = btn.dataset.tag;
        
        // Update button styles
        allButton.classList.remove('bg-accent-500', 'text-white');
        allButton.classList.add('bg-base-100', 'dark:bg-base-800', 'text-base-700', 'dark:text-base-300');
        
        tagButtons.forEach(b => {
          b.classList.remove('bg-accent-500', 'text-white');
          b.classList.add('bg-base-100', 'dark:bg-base-800', 'text-base-700', 'dark:text-base-300');
        });
        
        btn.classList.add('bg-accent-500', 'text-white');
        btn.classList.remove('bg-base-100', 'dark:bg-base-800', 'text-base-700', 'dark:text-base-300');
        
        filterByTag(tag);
      });
    });
  });
</script>
